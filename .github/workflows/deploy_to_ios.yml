name: "Build iOS app"

on:
  push:
    branches:
      - main

jobs:
  build_with_signing:
    runs-on: macos-latest
    steps:
      - name: Check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: cedvdb/action-flutter-build-ios@v1
        with:
          # always use --export-options-plist=ios/GithubActionsExportOptions.plist
          build-cmd: touch .env && echo "${{ secrets.RIOT_API_KEY }}" >> .env && flutter build ipa --release --export-options-plist=ios/GithubActionsExportOptions.plist
          certificate-base64: ${{ secrets.APPLE_SIGNING_CERTIFICATE }}
          certificate-password: ${{ secrets.APPLE_SIGNING_PASSWORD }}
          provisioning-profile-base64: ${{ secrets.APPLE_PROVISIONING_PROFILE }}
          keychain-password: ${{ secrets.APPLE_SIGNING_PASSWORD }}

      - name: Print contents of build folder
        run: |
          echo "Contents of the build folder:"
          ls -R build/ios
          
      - name: 'Upload app to TestFlight'
        uses: apple-actions/upload-testflight-build@v1
        with: 
          app-path: '/Users/runner/work/valoralysis/valoralysis/build/ios/ipa/valoralysis.ipa'
          issuer-id: ${{ secrets.APP_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}

  store_deploy_android:
    # Only run this job if the branch name starts with 'release/'
   # if:  startsWith(github.head_ref, 'release/')
    name: android store release
    runs-on: ubuntu-latest
    env:
      # Setup env variables that will be used throughout the workflow
      JAVA_VERSION: 12.0
      FLUTTER_VERSION: 3.13.1
      AAB_PATH: build/app/outputs/bundle/release/app-release.aab
      KEYSTORE_PATH: android/keystore_valoralysis.jks
      KEY_PROPS_PATH: android/key.properties
      SERVICE_ACCOUNT_PATH: store_credentials.json
    steps:
      # Checkout repository codebase
      - name: Checkout the code
        uses: actions/checkout@v3

      # Setup Java in the VM
      - name: Setup Java to compile the Android project
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}
      
      # Setup Flutter in the VM
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      # Decode Android env variables
      - name: Decode Android keystore
        run: echo "${{ secrets.ANDROID_KEY }}" | base64 --decode > ${{ env.KEYSTORE_PATH }}

      - name: Decode Android key properties
        run: echo "${{ secrets.ANDROID_KEY_PROPERTIES }}" | base64 --decode > ${{ env.KEY_PROPS_PATH }}

      # Decode Android release Service Account
      - name: Decode Android Service Account
        run: echo "${{ secrets.ANDROID_SERVICE_ACCOUNT }}" | base64 --decode > ${{ env.SERVICE_ACCOUNT_PATH }}

      # Run flutter commands
      - name: Run flutter pub get
        run: flutter pub get

      - name: ðŸ“¦ Install dependencies
        run: flutter pub get

      # Build Android Bundle release file
      - name: Build aab
        run: |
          flutter build appbundle 
          --release



      # Deploy bundle to Google Play internal testing
      - name: Deploy to Play Store (Internal testing)
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: ${{ secrets.SERVICE_ACCOUNT_JSON}}
          packageName: com.yourapp.package
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: internal
