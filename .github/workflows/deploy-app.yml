name: "Build and Deploy Apps"

on:
  workflow_dispatch:

jobs:
  update_pubspec_and_appcast: 
    runs-on: ubuntu-latest
    steps:
      - name: Get last commit description
        id: commit
        run: |
            COMMIT_MESSAGE=$(git log -1 --pretty=%B)
            echo "message<<EOF" >> $GITHUB_ENV
            echo "$COMMIT_MESSAGE" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
      - name: Print pubspec.yaml content  
        run: cat pubspec.yaml  
      - name: Print working directory and list files  
        run: |  
            pwd  
            ls -al  
      - name: Extract version from pubspec.yaml
        id: version
        run: |
            # Extract the current version
            VERSION=$(grep 'version: ' pubspec.yaml | sed 's/version: //')
            # Extract the build number
            BUILD_NUMBER=$(echo $VERSION | cut -d'+' -f2)
            # Increment the build number
            NEW_BUILD_NUMBER=$((BUILD_NUMBER + 1))
            # Update the version with the new build number
            NEW_VERSION=$(echo $VERSION | cut -d'+' -f1)"+$NEW_BUILD_NUMBER"
            # Update the version in the pubspec.yaml
            sed -i "s/version: $VERSION/version: $NEW_VERSION/" pubspec.yaml
            # Commit the changes
            git config --global user.name "github-actions"
            git config --global user.email "github-actions@github.com"
            git add pubspec.yaml
            git commit -m "Bump version to $NEW_VERSION"

      - name: Update appcast.xml
        run: |
            PUBDATE=$(date -u +"%a, %d %b %Y %H:%M:%S %z")
            # Update Android entry in appcast.xml
            sed -i "/<item>/,/<\/item>/ { /<title>Version/ s/<title>Version .*<\/title>/<title>Version $NEW_VERSION<\/title>/; /<description>/ s/<description>.*<\/description>/<description>${{ env.message }}<\/description>/; /<pubDate>/ s/<pubDate>.*<\/pubDate>/<pubDate>${PUBDATE}<\/pubDate>/; /<enclosure/ s/sparkle:version=\".*\"/sparkle:version=\"$NEW_VERSION\"/ }" appcast.xml
            # Update iOS entry in appcast.xml
            sed -i "/<item>/,/<\/item>/ { /sparkle:os=\"ios\"/ { /<title>Version/ s/<title>Version .*<\/title>/<title>Version $NEW_VERSION<\/title>/; /<description>/ s/<description>.*<\/description>/<description>${{ env.message }}<\/description>/; /<pubDate>/ s/<pubDate>.*<\/pubDate>/<pubDate>${PUBDATE}<\/pubDate>/; /<enclosure/ s/sparkle:version=\".*\"/sparkle:version=\"$NEW_VERSION\"/ } }" appcast.xml
            # Commit and push changes
            git add appcast.xml
            git commit -m "${{ env.message }}"
            git push

  build_ios:
    runs-on: macos-latest
    steps:
      - name: Check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: cedvdb/action-flutter-build-ios@v1
        with:
          build-cmd: touch .env && echo "RIOT_API_KEY=${{ secrets.RIOT_API_KEY }}" >> .env && flutter build ipa --release --export-options-plist=ios/GithubActionsExportOptions.plist
          certificate-base64: ${{ secrets.APPLE_SIGNING_CERTIFICATE }}
          certificate-password: ${{ secrets.APPLE_SIGNING_PASSWORD }}
          provisioning-profile-base64: ${{ secrets.APPLE_PROVISIONING_PROFILE }}
          keychain-password: ${{ secrets.APPLE_SIGNING_PASSWORD }}

      - name: Print contents of build folder
        run: |
          echo "Contents of the build folder:"
          ls -R build/ios

      - name: "Upload app to TestFlight"
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: "/Users/runner/work/valoralysis/valoralysis/build/ios/ipa/valoralysis.ipa"
          issuer-id: ${{ secrets.APP_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}

  build_android:
    runs-on: ubuntu-latest
    env:
      JAVA_VERSION: 17.0
      FLUTTER_VERSION: 3.19.0
      AAB_PATH: build/app/outputs/bundle/release/app-release.aab
      KEYSTORE_PATH: android/keystore_valoralysis.jks
      KEY_PROPS_PATH: android/key.properties
      SERVICE_ACCOUNT_PATH: store_credentials.json
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Setup Java to compile the Android project
        uses: actions/setup-java@v2
        with:
          distribution: "zulu"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Decode Android keystore
        run: echo "${{ secrets.ANDROID_KEY }}" | base64 --decode > ${{ env.KEYSTORE_PATH }}

      - name: Decode Android key properties
        run: echo "${{ secrets.ANDROID_KEY_PROPERTIES }}" | base64 --decode > ${{ env.KEY_PROPS_PATH }}

      - name: Decode Android Service Account
        run: echo "${{ secrets.ANDROID_SERVICE_ACCOUNT }}" | base64 --decode > ${{ env.SERVICE_ACCOUNT_PATH }}

      - name: create .env
        run: touch .env && echo "RIOT_API_KEY=${{ secrets.RIOT_API_KEY }}" >> .env

      - name: Run flutter pub get
        run: flutter pub get

      - name: ðŸ“¦ Install dependencies
        run: flutter pub get

      - name: Build aab
        run: flutter build appbundle --release --dart-define=RIOT_API_KEY=${{ secrets.RIOT_API_KEY }}

      - name: Sign Android App Bundle
        run: jarsigner -keystore ${{ env.KEYSTORE_PATH }} -storepass ${{ secrets.ANDROID_KEY_PASSWORD }} -keypass ${{ secrets.ANDROID_KEY_PASSWORD }} -sigalg SHA256withRSA -digestalg SHA-256 -signedjar build/app/outputs/bundle/release/app-release-signed.aab build/app/outputs/bundle/release/*.aab Valoralysis

      - name: Deploy to Play Store (Internal testing)
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          packageName: com.melsayed.valoralysis
          status: draft
          releaseFiles: build/app/outputs/bundle/release/app-release-signed.aab
          track: internal
          
  revert_changes:
    runs-on: ubuntu-latest
    needs: [build_ios, build_android]
    if: ${{ failure() }}
    steps:
      - name: Revert last commit
        run: git reset --hard HEAD^
        
  notify:
    runs-on: ubuntu-latest
    needs: [build_ios, build_android]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Send Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: ${{ env.message }}
